//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./books_types');
//HELPER FUNCTIONS AND STRUCTURES

var BookAuthorInformation_addBook_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.AddBookRequest(args.request);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field request is unset!');
    }
  }
};
BookAuthorInformation_addBook_args.prototype = {};
BookAuthorInformation_addBook_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.AddBookRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BookAuthorInformation_addBook_args.prototype.write = function(output) {
  output.writeStructBegin('BookAuthorInformation_addBook_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BookAuthorInformation_addBook_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.Exception) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AddBookResponse(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
BookAuthorInformation_addBook_result.prototype = {};
BookAuthorInformation_addBook_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AddBookResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.Exception();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BookAuthorInformation_addBook_result.prototype.write = function(output) {
  output.writeStructBegin('BookAuthorInformation_addBook_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BookAuthorInformation_getBooks_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.GetBooksRequest(args.request);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field request is unset!');
    }
  }
};
BookAuthorInformation_getBooks_args.prototype = {};
BookAuthorInformation_getBooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.GetBooksRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BookAuthorInformation_getBooks_args.prototype.write = function(output) {
  output.writeStructBegin('BookAuthorInformation_getBooks_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BookAuthorInformation_getBooks_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.Exception) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GetBooksResponse(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
BookAuthorInformation_getBooks_result.prototype = {};
BookAuthorInformation_getBooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GetBooksResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.Exception();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BookAuthorInformation_getBooks_result.prototype.write = function(output) {
  output.writeStructBegin('BookAuthorInformation_getBooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BookAuthorInformation_updateBooks_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.UpdateBookRequest(args.request);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field request is unset!');
    }
  }
};
BookAuthorInformation_updateBooks_args.prototype = {};
BookAuthorInformation_updateBooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.UpdateBookRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BookAuthorInformation_updateBooks_args.prototype.write = function(output) {
  output.writeStructBegin('BookAuthorInformation_updateBooks_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BookAuthorInformation_updateBooks_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.Exception) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResponseStatus(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
BookAuthorInformation_updateBooks_result.prototype = {};
BookAuthorInformation_updateBooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResponseStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.Exception();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BookAuthorInformation_updateBooks_result.prototype.write = function(output) {
  output.writeStructBegin('BookAuthorInformation_updateBooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BookAuthorInformation_deleteBooks_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new ttypes.DeleteBookRequest(args.request);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field request is unset!');
    }
  }
};
BookAuthorInformation_deleteBooks_args.prototype = {};
BookAuthorInformation_deleteBooks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.DeleteBookRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BookAuthorInformation_deleteBooks_args.prototype.write = function(output) {
  output.writeStructBegin('BookAuthorInformation_deleteBooks_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BookAuthorInformation_deleteBooks_result = function(args) {
  this.success = null;
  this.ex1 = null;
  if (args instanceof ttypes.Exception) {
    this.ex1 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResponseStatus(args.success);
    }
    if (args.ex1 !== undefined && args.ex1 !== null) {
      this.ex1 = args.ex1;
    }
  }
};
BookAuthorInformation_deleteBooks_result.prototype = {};
BookAuthorInformation_deleteBooks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResponseStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.Exception();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BookAuthorInformation_deleteBooks_result.prototype.write = function(output) {
  output.writeStructBegin('BookAuthorInformation_deleteBooks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BookAuthorInformationClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BookAuthorInformationClient.prototype = {};
BookAuthorInformationClient.prototype.seqid = function() { return this._seqid; };
BookAuthorInformationClient.prototype.new_seqid = function() { return this._seqid += 1; };
BookAuthorInformationClient.prototype.addBook = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addBook(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addBook(request);
  }
};

BookAuthorInformationClient.prototype.send_addBook = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addBook', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new BookAuthorInformation_addBook_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BookAuthorInformationClient.prototype.recv_addBook = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BookAuthorInformation_addBook_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addBook failed: unknown result');
};
BookAuthorInformationClient.prototype.getBooks = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBooks(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBooks(request);
  }
};

BookAuthorInformationClient.prototype.send_getBooks = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBooks', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new BookAuthorInformation_getBooks_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BookAuthorInformationClient.prototype.recv_getBooks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BookAuthorInformation_getBooks_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBooks failed: unknown result');
};
BookAuthorInformationClient.prototype.updateBooks = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateBooks(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateBooks(request);
  }
};

BookAuthorInformationClient.prototype.send_updateBooks = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateBooks', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new BookAuthorInformation_updateBooks_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BookAuthorInformationClient.prototype.recv_updateBooks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BookAuthorInformation_updateBooks_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateBooks failed: unknown result');
};
BookAuthorInformationClient.prototype.deleteBooks = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteBooks(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteBooks(request);
  }
};

BookAuthorInformationClient.prototype.send_deleteBooks = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteBooks', Thrift.MessageType.CALL, this.seqid());
  var params = {
    request: request
  };
  var args = new BookAuthorInformation_deleteBooks_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BookAuthorInformationClient.prototype.recv_deleteBooks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BookAuthorInformation_deleteBooks_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteBooks failed: unknown result');
};
var BookAuthorInformationProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
BookAuthorInformationProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
BookAuthorInformationProcessor.prototype.process_addBook = function(seqid, input, output) {
  var args = new BookAuthorInformation_addBook_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addBook.length === 1) {
    Q.fcall(this._handler.addBook.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new BookAuthorInformation_addBook_result({success: result});
        output.writeMessageBegin("addBook", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Exception) {
          result = new BookAuthorInformation_addBook_result(err);
          output.writeMessageBegin("addBook", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addBook", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addBook(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Exception) {
        result_obj = new BookAuthorInformation_addBook_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addBook", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addBook", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BookAuthorInformationProcessor.prototype.process_getBooks = function(seqid, input, output) {
  var args = new BookAuthorInformation_getBooks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBooks.length === 1) {
    Q.fcall(this._handler.getBooks.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new BookAuthorInformation_getBooks_result({success: result});
        output.writeMessageBegin("getBooks", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Exception) {
          result = new BookAuthorInformation_getBooks_result(err);
          output.writeMessageBegin("getBooks", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getBooks", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBooks(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Exception) {
        result_obj = new BookAuthorInformation_getBooks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getBooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getBooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BookAuthorInformationProcessor.prototype.process_updateBooks = function(seqid, input, output) {
  var args = new BookAuthorInformation_updateBooks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateBooks.length === 1) {
    Q.fcall(this._handler.updateBooks.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new BookAuthorInformation_updateBooks_result({success: result});
        output.writeMessageBegin("updateBooks", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Exception) {
          result = new BookAuthorInformation_updateBooks_result(err);
          output.writeMessageBegin("updateBooks", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateBooks", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateBooks(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Exception) {
        result_obj = new BookAuthorInformation_updateBooks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateBooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateBooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BookAuthorInformationProcessor.prototype.process_deleteBooks = function(seqid, input, output) {
  var args = new BookAuthorInformation_deleteBooks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteBooks.length === 1) {
    Q.fcall(this._handler.deleteBooks.bind(this._handler), args.request)
      .then(function(result) {
        var result_obj = new BookAuthorInformation_deleteBooks_result({success: result});
        output.writeMessageBegin("deleteBooks", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.Exception) {
          result = new BookAuthorInformation_deleteBooks_result(err);
          output.writeMessageBegin("deleteBooks", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteBooks", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteBooks(args.request, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Exception) {
        result_obj = new BookAuthorInformation_deleteBooks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteBooks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteBooks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
